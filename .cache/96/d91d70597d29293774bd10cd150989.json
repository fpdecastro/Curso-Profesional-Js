{"id":"ejercicios/Generator.html","dependencies":[{"name":"/mnt/c/Users/paqui/desktop/primer semestre/Cursos en platzi/Curso Profesional de javascript/package.json","includedInParent":true,"mtime":1597414772829}],"generated":{"html":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Generator</title>\n</head>\n<body>\n    <a href=\"/ejercicios/\">Go Back</a>\n    <h3>Abrí la consola</h3>\n    <script>/*TEORIA GENEGADORES\n        Se identifican con el keyword function* name_generator(){}.\n        Los generadores se deben instanciar con una variable. Por ejemplo\n        const g = newGenerator()\n        Una vez llamado el Generador se podrá ejecutar la función con el keyword .next. Por ejemplo\n        g.next()\n        La función se ejecutara hasta que encuentre el primer yield.\n        Luego se podrá seguir ejecutando la función si volvemos a llamar a g.next()\n        */\nfunction* newGenerator() {\n  console.log('Hola, como andas?');\n  yield;\n  console.log('Todo bien y vos?');\n}\n\nfunction* GeneratorId() {\n  let id = 1;\n  let reset;\n\n  while (true) {\n    reset = yield id;\n\n    if (reset) {\n      id = 1;\n    } else {\n      id += 1;\n      console.log(id);\n    }\n  }\n}\n\n;\n\nfunction* Finobacci() {\n  let list_finobacci = [0, 1];\n\n  while (true) {\n    last_number = list_finobacci[list_finobacci.length - 1];\n    reset = yield last_number;\n\n    if (reset) {\n      let list_finobacci = [0, 1];\n    } else {\n      old_number = list_finobacci[list_finobacci.length - 2];\n      new_number = list_finobacci[list_finobacci.length - 1];\n      list_finobacci.push(old_number + new_number);\n    }\n  }\n}\n\nfunction* Finobacci_segunda() {\n  // let list_finobacci = [0,1];\n  let old_number = 0;\n  let new_number = 1;\n  let sum = 0;\n\n  while (true) {\n    reset = yield sum;\n\n    if (reset) {\n      let old_number = 0;\n      let new_number = 1;\n    } else {\n      sum = old_number + new_number;\n      old_number = new_number;\n      new_number = sum;\n    }\n  }\n}</script>\n</body>\n</html>"},"sourceMaps":null,"error":null,"hash":"18132f5048559b2f8cc2c75e389c6305","cacheData":{"env":{}}}