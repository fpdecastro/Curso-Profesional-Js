{"id":"ejercicios/promises.html","dependencies":[{"name":"_css_loader","parent":"/mnt/c/Users/paqui/desktop/primer semestre/Cursos en platzi/Curso Profesional de javascript/ejercicios/promises.html","resolved":"/mnt/c/Users/paqui/desktop/primer semestre/Cursos en platzi/Curso Profesional de javascript/node_modules/parcel-bundler/src/builtins/css-loader.js"},{"name":"/mnt/c/Users/paqui/desktop/primer semestre/Cursos en platzi/Curso Profesional de javascript/package.json","includedInParent":true,"mtime":1597414772829}],"generated":{"html":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Promesas</title>\n</head>\n<body>\n    <h1 style=\"text-align: center;\">Promesas</h1>\n    <ul>\n        <li><button id=\"sequence\">Get Top Movies in Sequence</button></li>\n        <li><button id=\"parallel\">Get Top Movies in Parallel</button></li>\n        <li><button id=\"fastest\">Get Fastest Top Movie</button></li>\n    </ul>\n  \n    <ul id=\"movies\"></ul>\n    <script>const apiKey = 'b89fc45c2067cbd33560270639722eae';\n\nasync function getMovie(id) {\n  const url = `https://api.themoviedb.org/3/movie/${id}?api_key=${apiKey}`;\n  const response = await fetch(url);\n  const data = await response.json();\n  return data;\n}\n\nasync function getPopularMovies() {\n  const url = `https://api.themoviedb.org/3/discover/movie?sort_by=popularity.desc&api_key=${apiKey}`;\n  /* fetch nos devuleve una promesa */\n\n  const response = await fetch(url);\n  const data = await response.json();\n  return data.results;\n}\n\nasync function getTopMoviesIds(n = 3) {\n  // return getPopularMovies().then(popularMovies\n  // => popularMovies.slice(0,n).map( movie => movie.id)\n  // );\n  // Como es una promesa tenemos que esperar hasta que se resuelva por eso se le agregamos el keyword await\n  // Como la promesa puede tirarnos un error el correcto manejo es con un try and catch\n  // try{\n  //     const popularMovies = awaitgetPopularMovies()\n  // }\n  // catch (error){\n  //    console.log(error.message)\n  // }\n  // const popularMovies = await getPopularMovies();\n  // const ids = popularMovies.slice(0, n).map( movie => movie.id );\n  // return ids;\n  // }\n  const popularMovies = await getPopularMovies();\n  const ids = popularMovies.slice(0, n).map(movie => movie.id);\n  return ids;\n}\n\nasync function getTopMoviesInSequence() {\n  const ids = await getTopMoviesIds();\n  const movies = [];\n  /*La iteración por cada elemento del array que obtenemos hace que se convierta en una sequencia*/\n\n  for (const id of ids) {\n    const movie = await getMovie(id);\n    movies.push(movie);\n  }\n\n  return movies;\n}\n\nasync function getTopMovieInParallel() {\n  const ids = await getTopMoviesIds();\n  const moviePromise = ids.map(id => getMovie(id));\n  /*Promise all tbm es una promesa que va a tratar de devolver\n  las promesas juntas de moviePromise*/\n\n  const movies = await Promise.all(moviePromise);\n  return movies;\n}\n\nasync function getFastestTopMovies() {\n  const ids = await getTopMoviesIds();\n  const moviePromise = ids.map(id => getMovie(id));\n  /*Promises.race(Promesas) devuelve la primer promesa que se resuelva de un conjunto de ellas*/\n\n  const movie = await Promise.race(moviePromise);\n  return movie;\n}\n\nfunction renderMovies(movies) {\n  const movieList = document.getElementById('movies');\n  /* Obtiene el elemnto del DOM con el id 'movies' y luego lo reemplaza por vacío*/\n\n  movieList.innerHTML = '';\n  /*movies entra como parámetro y es un array de 3 películas más populares*/\n\n  movies.forEach(movie => {\n    /*Se Crea un objeto li por cada elemento del array*/\n    const listItem = document.createElement('li');\n    /*Se escribe en listItem el html nuevo presentando las películas de movies*/\n\n    listItem.innerHTML = `\n                    <img src=\"https://image.tmdb.org/t/p/w342${movie.poster_path}\" />\n                    <h5>${movie.title}</h5>\n                    <p>Released on <em>${movie.release_date}</em></p>\n                `;\n    /*Agrega un nuevo nodo al final de la lista de un elemento hijo de un elemento padre especificado\n    Es decir listItem es hijo del elemento con id = movies*/\n\n    movieList.appendChild(listItem);\n  });\n}\n\ndocument.getElementById('sequence').onclick = async function () {\n  const movies = await getTopMoviesInSequence();\n  renderMovies(movies);\n};\n\ndocument.getElementById('parallel').onclick = async function () {\n  const movies = await getTopMovieInParallel();\n  renderMovies(movies);\n};\n\ndocument.getElementById('fastest').onclick = async function () {\n  const movies = await getFastestTopMovies();\n  renderMovies([movies]);\n};</script>\n</body>\n</html>"},"sourceMaps":null,"error":null,"hash":"d32a74f2ab69a545240396af4afbd10c","cacheData":{"env":{}}}